<style>
/* Main Heading */
h1 {
  font-size: 2.5rem;
  color: #1e3a8a;
  text-align: center;
  margin-bottom: 30px;
}

/* Error Explanation */
.error-explanation {
  background-color: #ffcccc;
  color: #d32f2f;
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 20px;
}

.error-explanation h2 {
  margin: 0;
  font-size: 1.2rem;
}

.error-explanation ul {
  margin: 10px 0 0;
  padding-left: 20px;
}

.error-explanation li {
  font-size: 1rem;
}

/* Edit Form */
.new-message-form {
  background-color: #f7f8fa;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

.form-group {
  margin-top: 20px;
  margin-bottom: 20px;
}

.form-label {
  display: block;
  font-weight: 600;
  margin-bottom: 8px;
  color: #333;
}

.form-input, .form-textarea {
  width: 100%;
  padding: 12px;
  font-size: 1rem;
  border: 2px solid #ccc;
  border-radius: 8px;
  box-sizing: border-box;
  transition: border-color 0.3s ease;
}

.form-input:focus, .form-textarea:focus {
  border-color: #1976d2;
  outline: none;
}

.form-textarea {
  height: 120px;
  resize: vertical;
}

/* Tags Section */
.tags-section h3 {
  font-size: 1.6rem;
  color: #1976d2;
  margin-bottom: 15px;
}

.tags-container {
  list-style: none;
  padding: 0;
  margin-bottom: 20px;
}

.tag {
  display: inline-flex;
  align-items: center;
  background-color: #e0f7fa;
  color: #00796b;
  padding: 5px 12px;
  border-radius: 20px;
  margin-right: 10px;
  font-size: 1rem;
}

.existing-tags select {
  width: calc(100% - 20px);
  padding: 8px;
  font-size: 1rem;
  border-radius: 8px;
  margin-bottom: 10px;
}

.new-tag-section input {
  width: calc(100% - 100px);
  padding: 8px;
  font-size: 1rem;
  border-radius: 8px;
  margin-bottom: 10px;
}

.remove-tag-button {
  background: none;
  border: none;
  color: #d32f2f;
  font-size: 1.2rem;
  margin-left: 8px;
  cursor: pointer;
  transition: color 0.3s ease;
}

.remove-tag-button:hover {
  color: #9a0007;
}

/* Add Tag Section */
.tag-input {
  width: calc(100% - 100px);
  padding: 8px;
  font-size: 1rem;
  border: 2px solid #ccc;
  border-radius: 8px;
}

.add-tag {
  padding: 10px 20px;
  font-size: 1rem;
  background-color: #1976d2;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.add-tag:hover {
  background-color: #1565c0;
}

/* Thumbnail and Video Section */
.thumbnail, .video-player {
  max-width: 100%;
  border-radius: 8px;
  margin-bottom: 15px;
}

.delete-btn {
  display: inline-block;
  background-color: #d32f2f;
  color: white;
  padding: 8px 16px;
  border-radius: 8px;
  text-decoration: none;
  font-size: 1rem;
  transition: background-color 0.3s ease;
}

.delete-btn:hover {
  background-color: #9a0007;
}

/* Actions */
.form-actions {
  display: flex;
  justify-content: space-between;
  gap: 20px;
  align-items: center;
}

.form-submit {
  padding: 10px 20px;
  font-size: 1.2rem;
  background-color: #1976d2;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.form-submit:hover {
  background-color: #1565c0;
}

.cancel-link {
  padding: 10px 20px;
  font-size: 1.2rem;
  color: #1976d2;
  background-color: transparent;
  border: 2px solid #1976d2;
  border-radius: 8px;
  text-decoration: none;
  transition: background-color 0.3s ease;
}

.cancel-link:hover {
  background-color: #e3f2fd;
}

.current-file {
    display: flex;
    flex-direction: column;
    align-items: center;
    max-width: 600px;
}


  </style>

<!-- Error Explanation -->
<% if @message.errors.any? %>
  <div class="error-explanation">
    <h2>Error</h2>
    <ul>
      <% @message.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
    </ul>
  </div>
<% end %>

<!-- Edit Form -->
<div class="new-message-form">
  <%= form_with(model: @message, local: true) do |form| %>
    <div class="form-group">
      <%= form.label :title, class: "form-label" %>
      <%= form.text_field :title, class: "form-input" %>
    </div>

    <div class="form-group">
      <%= form.label :description, class: "form-label" %>
      <%= form.text_area :description, class: "form-textarea" %>
    </div>

    <!-- Tags -->
    <div class="tags-section">
      <ul class="tags-container" id="tags-container">
        <% @message.tags.each do |tag| %>
          <li class="tag">
            <%= tag.name %>
            <button type="button" class="remove-tag-button">x</button>
            <%= hidden_field_tag "message[tags][]", tag.name %>
          </li>
        <% end %>
      </ul>

      <!-- Existing Tags Dropdown -->
      <div class="existing-tags">
        <label for="tag-select">Add an existing tag:</label>
        <select id="tag-select">
          <option value="">-- Select a tag --</option>
          <% @all_tags.each do |tag| %>
            <option value="<%= tag.name %>"><%= tag.name %></option>
          <% end %>
        </select>
        <button type="button" id="add-tag-button" class="add-tag">Add Tag</button>
      </div>

      <!-- New Tag Input (optional) -->
      <div class="new-tag-section">
        <input type="text" id="tag-input" class="tag-input" placeholder="Enter a new tag">
        <button type="button" id="add-new-tag-button" class="add-tag">Add New Tag</button>
      </div>
    </div>

<!-- Attached Thumbnail -->
<div class="form-group">
  
  <%= form.label :thumbnail_file, "Upload Thumbnail (Optional)" %>
  <%= form.file_field :thumbnail_file, class: "form-input" %>
  <% if @message.thumbnail_file.attached? %>
    <div class="current-file">
      <%= image_tag @message.thumbnail_file, class: "thumbnail" %>
      <%= button_to "Remove Thumbnail", remove_thumbnail_message_path(@message), method: :delete, class: "delete-btn" %>
    </div>
  <% end %>
  
</div>

<!-- Attached Video (Required) -->
<div class="form-group">

  <%= form.label :video_file, "Upload Video" %>
  <%= form.file_field :video_file, class: "form-input", required: true %>

<!-- Attached Video -->
<% if @message.video_file.attached? && @message.persisted? %>
  <div class="current-file">
    <%= video_tag url_for(@message.video_file), controls: true, class: "video-player" %>
  </div>
<% end %>

</div>



    <div class="form-actions">
      <%= link_to "Cancel", messages_path, class: "cancel-link" %>
      <%= form.submit "Save", class: "form-submit" %>
    </div>
  <% end %>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tagsContainer = document.querySelector('#tags-container');
    const addTagButton = document.querySelector('#add-tag-button');
    const tagSelectField = document.querySelector('#tag-select');
    const addNewTagButton = document.querySelector('#add-new-tag-button');
    const newTagInputField = document.querySelector('#tag-input');

    // Function to create a new tag element with a hidden input
    const createTagElement = (tagName) => {
      const tagElement = document.createElement('li');
      tagElement.classList.add('tag');
      tagElement.textContent = tagName;

      // Add a remove button
      const removeButton = document.createElement('button');
      removeButton.textContent = 'x';
      removeButton.classList.add('remove-tag-button');

      // Attach the remove button functionality
      removeButton.addEventListener('click', () => {
        tagElement.remove(); // Remove the tag when the button is clicked
      });

      // Add a hidden input for form submission
      const hiddenInput = document.createElement('input');
      hiddenInput.type = 'hidden';
      hiddenInput.name = 'message[tags][]';
      hiddenInput.value = tagName;

      tagElement.appendChild(hiddenInput);
      tagElement.appendChild(removeButton);

      return tagElement;
    };

    // Add a tag when the select dropdown option is chosen
    addTagButton.addEventListener('click', () => {
      const tagName = tagSelectField.value.trim();
      if (tagName) {
        // Check for duplicate tags
        const existingTags = Array.from(tagsContainer.querySelectorAll('input')).map(input => input.value);
        if (existingTags.includes(tagName)) {
          alert('Tag already exists!');
          return;
        }

        const newTagElement = createTagElement(tagName);
        tagsContainer.appendChild(newTagElement);
      }
    });

    // Add a new tag when the "Add New Tag" button is clicked
    addNewTagButton.addEventListener('click', () => {
      const newTagName = newTagInputField.value.trim();
      if (newTagName) {
        // Check for duplicate tags
        const existingTags = Array.from(tagsContainer.querySelectorAll('input')).map(input => input.value);
        if (existingTags.includes(newTagName)) {
          alert('Tag already exists!');
          return;
        }

        const newTagElement = createTagElement(newTagName);
        tagsContainer.appendChild(newTagElement);
        newTagInputField.value = ''; // Clear the input field
      }
    });

    // Event delegation for dynamically added remove buttons
    tagsContainer.addEventListener('click', (event) => {
      if (event.target && event.target.classList.contains('remove-tag-button')) {
        const tagElement = event.target.closest('.tag');
        if (tagElement) {
          tagElement.remove(); // Remove the tag when the button is clicked
        }
      }
    });
  });
</script>
